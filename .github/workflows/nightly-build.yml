name: Nightly Build and Deploy

on:
  schedule:
    - cron: "0 0 * * *" 
  workflow_dispatch: 

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Clone Source Repository
        run: |
          git clone https://github.com/chemch/cs686-midterm-source.git source-repo
          cd source-repo
          git checkout main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Test Web UI
        run: |
          cd source-repo/web-ui
          pwd
          npm install
          npm run test
          docker build -t cs686-midterm-web-ui:latest .

      - name: Build and Test API Server
        run: |
          cd source-repo/api-server
          pwd
          npm install
          npm run test
          docker build -t cs686-midterm-api-server:latest .

      - name: Tag and Push Web UI to AWS ECR
        run: |
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cs686-midterm-web-ui
          docker tag cs686-midterm-web-ui:latest $ECR_URI:latest
          docker push $ECR_URI:latest

      - name: Tag and Push API Server to AWS ECR
        run: |
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cs686-midterm-api-server
          docker tag cs686-midterm-api-server:latest $ECR_URI:latest
          docker push $ECR_URI:latest


       - name: Deploy to EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            # Pull latest images
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            # Stop and remove existing containers
            cd /home/ec2-user/my-app
            docker-compose down
            
            # Pull latest images
            docker-compose pull
            
            # Start services
            docker-compose up -d
          EOF
