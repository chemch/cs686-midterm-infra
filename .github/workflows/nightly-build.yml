name: Nightly Build and Deploy

on:
  schedule:
    - cron: "0 0 * * *" 
  workflow_dispatch: 

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Clone Source Repository
        run: |
          git clone https://github.com/chemch/cs686-midterm-source.git source-repo
          cd source-repo
          git checkout main
          ls -al

      - name: Clone Infra Repository
        run: |
          git clone https://github.com/chemch/cs686-midterm-infra.git infra-repo
          cd infra-repo
          git checkout main
          ls -al 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Test Web UI
        run: |
          cd source-repo/web-ui
          pwd
          npm install
          npm run test
          docker build -t cs686-midterm-web-ui:latest .

      - name: Build and Test API Server
        run: |
          cd source-repo/api-server
          ls -al
          pwd
          npm install
          npm run test
          docker build -t cs686-midterm-api-server:latest .

      - name: Tag and Push Web UI to AWS ECR
        run: |
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cs686-midterm-web-ui
          docker tag cs686-midterm-web-ui:latest $ECR_URI:latest
          docker push $ECR_URI:latest

      - name: Tag and Push API Server to AWS ECR
        run: |
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cs686-midterm-api-server
          docker tag cs686-midterm-api-server:latest $ECR_URI:latest
          docker push $ECR_URI:latest
      
      - name: Launch Temporary EC2 Instance
        id: launch-ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ secrets.AWS_AMI_ID }} \
            --count 1 \
            --instance-type t2.micro \
            --key-name ${{ secrets.AWS_KEY_PAIR }} \
            --security-groups ${{ secrets.AWS_SECURITY_GROUP }} \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Temporary EC2 Instance ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          # Wait for the instance to start
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Get the public IP of the instance
          TEMP_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "Temporary EC2 Public IP: $TEMP_IP"
          echo "TEMP_IP=$TEMP_IP" >> $GITHUB_ENV

      - name: Wait for SSH to Become Available
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          echo "Waiting for SSH to become available on EC2..."

          # Loop until SSH works, retrying every 10 seconds
          until ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i private_key.pem ec2-user@${{ env.TEMP_IP }} "echo SSH Connection Successful"; do
            echo "SSH is not ready yet. Retrying in 10 seconds..."
            sleep 10
          done

          echo "SSH is now available. Proceeding with deployment."

          rm private_key.pem

      - name: Deploy Dependencies to EC2 for Testing
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.TEMP_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -aG docker ec2-user

            # Install Docker Compose
            DOCKER_COMPOSE_VERSION="2.20.3"
            sudo curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # Ensure the symlink is created with sudo
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose  
            
            # Verify Docker Compose installation
            docker-compose --version

            # Add SSH option to automatically accept the fingerprint
            export SSH_OPTIONS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
            
            # Set AWS credentials
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_REGION=${{ secrets.AWS_REGION }}

            # Verify AWS authentication
            aws sts get-caller-identity

            # Log in to AWS ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            # Create a directory for the application
            mkdir -p /home/ec2-user/my-app
           
      - name: Copy .env and docker-compose.yml to EC2
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          echo "Copying files to EC2..."
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i private_key.pem infra-repo/.env ec2-user@${{ env.TEMP_IP }}:/home/ec2-user/my-app/.env
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i private_key.pem infra-repo/docker-compose.yml ec2-user@${{ env.TEMP_IP }}:/home/ec2-user/my-app/docker-compose.yml
          
          # Remove private key after use for security
          echo "Removing private key..."
          rm private_key.pem

      - name: Start Docker Containers on EC2 and Run Smoke Test
        uses: appleboy/ssh-action@v0.1.10
        with:
            host: ${{ env.TEMP_IP }}
            username: ec2-user
            key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
            script: |
              set -e
              cd /home/ec2-user/my-app
              
              # start docker containers
              docker-compose down
              docker-compose pull
              docker-compose up -d --build

              # run smoke test
              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4001/)

              # Check if the response is 200
              if [ "$RESPONSE" -ne 200 ]; then
                echo "Smoke test failed!"
                exit 1
              fi
              echo "Smoke test passed!"

      - name: Terminate Temporary EC2 Instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}

      - name: Remove Latest ECR Images on Test Failure
        if: failure()
        run: |
          echo "Smoke test failed! Removing latest images from ECR..."
          
          # Get the latest image digest for Web UI
          WEB_UI_DIGEST=$(aws ecr list-images --repository-name cs686-midterm-web-ui \
            --region ${{ secrets.AWS_REGION }} --query 'imageIds[-1].imageDigest' --output text)
          
          if [ "$WEB_UI_DIGEST" != "None" ]; then
            echo "Deleting Web UI image: $WEB_UI_DIGEST"
            aws ecr batch-delete-image --repository-name cs686-midterm-web-ui \
              --region ${{ secrets.AWS_REGION }} --image-ids imageDigest=$WEB_UI_DIGEST
          else
            echo "No Web UI images found to delete."
          fi

          # Get the latest image digest for API Server
          API_SERVER_DIGEST=$(aws ecr list-images --repository-name cs686-midterm-api-server \
            --region ${{ secrets.AWS_REGION }} --query 'imageIds[-1].imageDigest' --output text)
          
          if [ "$API_SERVER_DIGEST" != "None" ]; then
            echo "Deleting API Server image: $API_SERVER_DIGEST"
            aws ecr batch-delete-image --repository-name cs686-midterm-api-server \
              --region ${{ secrets.AWS_REGION }} --image-ids imageDigest=$API_SERVER_DIGEST
          else
            echo "No API Server images found to delete."
          fi

      - name: Deploy to EC2 QA Instance
        if: success()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/ec2-user/my-app
            
            # Log in to AWS ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            # Pull the latest images and restart the containers
            docker-compose down
            docker-compose pull
            docker-compose up -d
